use clap::{Arg, ArgAction, ArgMatches, Command};

pub fn build() -> ArgMatches {
    Command::new(clap::crate_name!())
        .about(clap::crate_description!())
        .version(clap::crate_version!())
        .author(clap::crate_authors!("\n"))
        .long_about("Recursively delete files.")
        .arg(
            Arg::new("files")
                .value_name("FILE(S)")
                .help("One or more file(s) to process. Wildcards and multiple_occurrences files (e.g. 2019*.pdf 2020*.pdf) are supported. Use the ** glob to recurse (eg. **/*.log). Note: Case sensitive.")
                .required(true)
                .num_args(1..)
                .action(ArgAction::Append)
        )
        .arg( // Hidden debug parameter
            Arg::new("debug")
                .short('d')
                .long("debug")
                .help("Output debug information as we go. Supply it twice for trace-level logs.")
                .hide(true)
                .env("RDEL_DEBUG")
                .num_args(0)
                .action(ArgAction::Count)
        )
        .arg( // Dry-run
            Arg::new("dry-run")
                .short('r')
                .long("dry-run")
                .help("Iterate through the files and produce output without actually deleting anything.")
                .num_args(0)
                .hide(false)
                .action(ArgAction::SetTrue)
        )
        .arg( // Stop on error
            Arg::new("stop")
                .short('s')
                .long("stop-on-error")
                .help("If set, the program will stop if it encounters an error. If not, the program will attempt to continue if errors occur.")
                .num_args(0)
                .hide(false)
                .action(ArgAction::SetTrue)
        )
        .arg( // Don't print any information
            Arg::new("quiet")
                .short('q')
                .long("quiet")
                .help("Don't produce any output except errors while working.")
                .num_args(0)
                .hide(false)
                .action(ArgAction::SetTrue)
        )
        .arg( // Print summary information
            Arg::new("print-summary")
                .short('p')
                .long("print-summary")
                .help("Print summary detail.")
                .num_args(0)
                .hide(false)
                .action(ArgAction::SetTrue)
        )
        .arg( // Don't export detail information
            Arg::new("detail-off")
                .short('o')
                .long("detail-off")
                .help("Don't export detailed information about each file processed.")
                .num_args(0)
                .hide(false)
                .action(ArgAction::SetTrue)
        )
        .get_matches()
}
